<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Dev and Such]]></title>
  <link href="http://echosa.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://echosa.github.io/"/>
  <updated>2015-03-29T16:21:31-05:00</updated>
  <id>http://echosa.github.io/</id>
  <author>
    <name><![CDATA[Brian Zwahr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gopher-php and Phlog Update]]></title>
    <link href="http://echosa.github.io/blog/2015/01/12/gopher-php-update/"/>
    <updated>2015-01-12T14:37:53-06:00</updated>
    <id>http://echosa.github.io/blog/2015/01/12/gopher-php-update</id>
    <content type="html"><![CDATA[<p>I recently updated my <a href="https://github.com/echosa/gopher-php">gopher-php</a> package on GitHub as well as the <a href="http://echosa.freeshell.org/">web interface to my phlog</a> that uses it.</p>

<!--more-->


<p>Most of the updates came about due to a change in the Gopher server that is serving my gopherspace. We are now using <a href="http://gopherproxy.meulie.net/gophernicus.org/">Gophernicus</a> which supports some extra gophermap file types, most notably <code>h</code> for HTTP URLs.</p>

<p>Gophernicus brought with it some other changes as well, some of which required changes to not only the gopher-php library but my web frontend as well. While I was in there tinkering away anyway, I decided to finally get some items from my TODO list taken care of. Most notably, I added pagination as well as information about viewing the phlog via Gopher instead of HTTP.</p>

<p>Of course, the most interesting changes came in the form of updating the library and its unit tests. To my gleeful surprise, adding support for new gophermap item types (<code>h</code> and <code>i</code>, specifically) was as simple as updating a single switch statement; the rest of the library continued working and supported the new item types with no other changes. I should probably do something about that switch statement before it gets too unwieldy, though.</p>

<p>Anyway, it was nice to get some dev time in on this project. I do so much programming for other people and businesses and tend to spend my personal dev time on hobby projects. I&rsquo;m glad I was able to work on something that is personal but also practical and in production, instead of just a hobby project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New GOPHER Library for PHP]]></title>
    <link href="http://echosa.github.io/blog/2014/02/25/new-gopher-library-for-php/"/>
    <updated>2014-02-25T11:45:00-06:00</updated>
    <id>http://echosa.github.io/blog/2014/02/25/new-gopher-library-for-php</id>
    <content type="html"><![CDATA[<p>Well, I&rsquo;ve gone and done it. I&rsquo;ve created a library for reading and parsing <a href="http://en.wikipedia.org/wiki/Gopher_(protocol%29">GOPHER</a> files from PHP.</p>

<!--more-->


<p>I&rsquo;ve recently been playing with GOPHER again, and it&rsquo;s been a great blast from the past. I even started a phlog (a GOPHER blog, basically). However, I realized that not everyone is awesome enough to use GOPHER, so I wanted to make my new phlog available via HTTP as well. Enter gopher-php.</p>

<p>You can find the library <a href="https://github.com/echosa/gopher-php">here on GitHub</a>. It is quite tailor-made for my own usage, so it is pretty incomplete in terms of GOPHER features and support.</p>

<p>To see it in action, you can check out <a href="http://echosa.freeshell.org">my phlog&rsquo;s http web frontend</a>. In comparision, you can see my phlog via the GOPHER protocol by either visiting <a href="gopher://sdf.org/1/users/echosa/phlog">this link</a> using a GOPHER client (<a href="http://en.wikipedia.org/wiki/Lynx_(web_browser%29">lynx</a> recommended) or by using a GOPHER web interface such as <a href="http://gopherproxy.meulie.net/sdf.org/1/users/echosa/phlog">this one</a> (link will take you to the phlog).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why the PHP Interactive Shell Isn't a REPL, and Why It Is Lacking]]></title>
    <link href="http://echosa.github.io/blog/2012/10/10/why-php-a-isnt-a-repl/"/>
    <updated>2012-10-10T09:23:00-05:00</updated>
    <id>http://echosa.github.io/blog/2012/10/10/why-php-a-isnt-a-repl</id>
    <content type="html"><![CDATA[<p>After a recent conversation on Twitter, I felt like I should explain why I feel that <code>php -a</code>, the PHP Interactive Shell, isn&rsquo;t a REPL, and where it falls short because of this.</p>

<!--more-->


<p>First, a disclaimer: I will be giving a local talk on REPLs later this month, so if you will be attending that, there&rsquo;s no need to read further. I&rsquo;ll be going over pretty much everything in this post during my talk, so please, come by and attend! <em>end shameless self-promotion</em></p>

<p>&hellip;</p>

<p>Still here? OK, then. Moving on.</p>

<p>Let us start with a definition of sorts. REPL stands for Read-Eval-Print-Loop. A REPL is a program that reads input, evaluates what it read, prints the result (and possibly any output, and yes, there is a difference), then loops back to the read stage awaiting more input to evaluate and print. Here&rsquo;s an example session in the REPL for ruby (irb):</p>

<pre><code>$ irb
1.9.2p320 :001 &gt; 1
 =&gt; 1 
1.9.2p320 :002 &gt; 2
 =&gt; 2 
1.9.2p320 :003 &gt; 1+2
 =&gt; 3 
1.9.2p320 :004 &gt; ohai
NameError: undefined local variable or method `ohai' for main:Object
           from (irb):4
           from /Users/bzwahr/.rvm/rubies/ruby-1.9.2-p320/bin/irb:16:in `&lt;main&gt;'
1.9.2p320 :005 &gt; "ohai"
 =&gt; "ohai" 
1.9.2p320 :006 &gt; print "ohai"
ohai =&gt; nil 
1.9.2p320 :007 &gt; def printOhaiAndReturn42
1.9.2p320 :008?&gt;   print "ohai"
1.9.2p320 :009?&gt;   return 42
1.9.2p320 :010?&gt;   end
 =&gt; nil 
1.9.2p320 :011 &gt; printOhaiAndReturn42
ohai =&gt; 42 
1.9.2p320 :012 &gt; quit
</code></pre>

<p>As you can see, the REPL takes the input, then prints the evaluation. Notice that the result of the evaluation is printed after a double arrow (=>). irb makes a distinction between result and output using the double arrow. In the example I define a function that prints a string (ohai) and returns a number (42). Running the function results in <code>ohai =&gt; 42</code>, showing us that <code>42</code> is the <em>result</em> of the evaluation while <code>ohai</code> is what would be output (in this case to stdin). We also see an error when I try to evaluate the string <code>ohai</code> without quotes. The REPL tries to evaluate it as a variable or function, which of course it isn&rsquo;t, and gives us an error stating this.</p>

<p>This is a typical REPL. Some REPLs are different. For instance, python doesn&rsquo;t show different result and output values. Different REPLs handle multiline input (like when I defined the printOhaiAndReturn42 function, above) in different ways.</p>

<p>The PHP Interactive Shell is not typical REPL. I dare say its not a REPL at all. Here&rsquo;s a similar session to the irb example above, this time in the PHP Interactive Shell:</p>

<pre><code>$ php -a
Interactive shell

php &gt; 1
php &gt; 2
php &gt; 1+2
php &gt; ohai
php &gt; "ohai"
php &gt; print "ohai"
php &gt; 1;
PHP Parse error:  syntax error, unexpected '2' (T_LNUMBER) in php shell code on line 2

Parse error: syntax error, unexpected '2' (T_LNUMBER) in php shell code on line 2

php &gt; 2;
php &gt; print "ohai";
ohaiphp &gt; function printOhaiAndReturn42 () {
php { print "ohai";
php { return 42;
php { }
php &gt; printOhaiAndReturn42();
ohaiphp &gt; 
php &gt; 1
php &gt; +2
php &gt; +3;
php &gt; print 1
php &gt; +2
php &gt; +3;
6php &gt; quit
</code></pre>

<p>Right off the bat, you should notice two things: there&rsquo;s a lot less printing going on, and when something is printed there&rsquo;s no implicit newline (meaning the printed output is immediately followed by the next prompt). A larger but less immediately noticeable difference is that the shell requires a semicolon at the end of its statements (not a shock since this is PHP), so the first seven lines of the example are all evaluated as one statement (which is obviously invalid, thus the following error). This is also demonstrated on the last four lines, where I evaluate <code>print 1+2+3;</code> on several lines, thus getting 6 as output. The three lines prior to those, I make the same arithmetic evaluation but without calling <code>print</code>, which means I don&rsquo;t actually see my output.</p>

<p>This leads to a big issue with the shell. It doesn&rsquo;t let you know via the prompt that you&rsquo;re continuing the same statement as the previous line(s). Notice that when I defined the function, the prompt changed to have an opening curly brace while I was inside the function defining it. That&rsquo;s nice, and you can see that irb did something similar by adding a question mark to the prompt. Of course, you would think that as long as the shell doesn&rsquo;t show you any output or results that you could implicitly know that you are continuing a multiline statement. However, since the shell doesn&rsquo;t output anything even after a statement is ended with a semicolon, unless you explicitly told it to <code>echo</code> or <code>print</code>, that&rsquo;s just not true.</p>

<p>So, I&rsquo;ve come to the conclusion that the PHP Interactive Shell isn&rsquo;t a REPL, its a REL. There&rsquo;s no implicit or expected Print stage of the loop, as there is in a typical REPL.</p>

<p>Also, in order to be called a REPL, you should be able to input any valid statement, variable, scalar, etc. and have it evaluated (with or without a semicolon). If I put <code>1</code> in, I should get <code>1</code> returned and see that return value printed by the REPL. Sure, there&rsquo;s no semicolon, but when PHP is evaluating something like <code>print 1+2;</code>, it still has to evaluate what <code>1</code> and <code>2</code> are individually in order to treat them properly. This, of course, would require the Interactive Shell to make one of two changes: either force all regular statements (not class or function definitions, for instance) to be on a single line (thus removing the need for an ending semicolon as it it would be implied), or add some way of specifying that you want to continue this statement on the next line (like using \ in multiline bash calls). If the latter is the solution, then the prompt should definitely reflect this. I think I would prefer the former, since that is how most typical REPLs work. What you put as input, unless it is something that absolutely requires more input (like a function call without a closing parenthesis or a class or function definition that hasn&rsquo;t been closed with a closing curly brace yet) is immediately evaluated when you press return. Want to evaluate 1+2+3 like in the example? Then input <code>1+2+3</code> all on one line.</p>

<p>There&rsquo;s more to REPLs and the Interactive Shell than this, of course. This was just a quick overview of why I feel the PHP Interactive Shell is lacking. That&rsquo;s not to say it is a useless tool. It has its place and uses, but I would like to see it be an actual REPL instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP and Chmod]]></title>
    <link href="http://echosa.github.io/blog/2012/09/27/php-and-chmod/"/>
    <updated>2012-09-27T09:11:00-05:00</updated>
    <id>http://echosa.github.io/blog/2012/09/27/php-and-chmod</id>
    <content type="html"><![CDATA[<p>So, here&rsquo;s a tip that would have saved me about 10 minutes of frustrated work today. As <a href="http://php.net/manual/en/function.chmod.php">clearly stated in the PHP manual</a>, when you&rsquo;re setting the mode for a file via a number, the number must be expressed as octal. What this means is that the leading zero that is typically implicit when using chmod from the command like (e.g. <code>chmod 777 &lt;file&gt;</code>) is <strong>not</strong> implicit when calling chmod from PHP. You have to supply the leading zero, meaning you call something like <code>chmod(&lt;file&gt;, 0777)</code>.</p>

<!--more-->


<p>Now, you might be wondering why someone would be calling chmod from PHP anyway. I know I would be. Well, I&rsquo;m doing so for testing purposes. I have begun using <a href="http://behat.org">Behat with the Mink extension</a> for behavioral testing. I have an sqlite database that gets used with test data for these tests (the actual application uses MySQL, and yes, keeping those two in sync is a pain, especially when triggers are involved, but I digress).</p>

<p>Anyway, because of the way Behat works in conjunction with my running Apache/PHP/application setup, I didn&rsquo;t see a way of hooking into Behat in such a way where I could tell the database to run everything in throw away transactions in order to keep my database clean and as expected for each test scenario. Therefore, I simply hooked into Behat before each scenario to copy my pristine test database to a backup, then after each scenario copy it back, essentially rolling back any transactions that occurred during that scenario.</p>

<p>This may not be the best way to do it, but its what I figured out and its working for me, for now at least. Luckily, this is a well established application and the database doesn&rsquo;t change, so the mysql <-> sqlite syncing is a null issue for the foreseeable future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XDebug and Truncated Output]]></title>
    <link href="http://echosa.github.io/blog/2012/08/22/xdebug-and-truncated-output/"/>
    <updated>2012-08-22T08:42:00-05:00</updated>
    <id>http://echosa.github.io/blog/2012/08/22/xdebug-and-truncated-output</id>
    <content type="html"><![CDATA[<p>Having used Zend_Debug::dump() with XDebug for quite some time, I&rsquo;ve finally gotten tired of seeing truncated output. What I mean is, when I have Zend_Debug::dump() display a stack trace (for instance), it will show the first few lines then truncate with and ellipsis. This is fairly useless. Sure, I <em>could</em> go to the error log, but there&rsquo;s a reason I&rsquo;m dumping this to the screen (when I&rsquo;m in developer mode and have the show debug info flag for my application turned on&hellip; don&rsquo;t worry, this doesn&rsquo;t happen in production). For a while now I&rsquo;ve just put up with it, thinking it an issue with Zend_Debug.</p>

<!--more-->


<p>I was wrong.</p>

<p>Its actually an issue with XDebug and the amount of information it will show. Even just using var_dump by itself (Zend_Debug uses it internally) will result in truncation. However, this is a one line fix. In your php.ini, put this:
    xdebug.var_display_max_data = -1
or in your application config, you can set this at run time like this:
    phpSettings.xdebug.var_display_max_data = -1
The -1 tells XDebug to display an infinite amount of data. No more truncation!</p>

<p>You might ask why I&rsquo;m Zend_Debug::dump()-ing my stack traces anyway, instead of just printing or echoing them. Well, because SHUT UP THAT&rsquo;S WHY. Seriously, though, its just something I&rsquo;ve done since I started using Zend Framework that has stuck around with me. I&rsquo;m only human, which is slightly better than <a href="http://www.youtube.com/watch?v=zQTimBTkYzw">almost human</a>.</p>
]]></content>
  </entry>
  
</feed>
