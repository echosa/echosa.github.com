<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mink | Dev and Such]]></title>
  <link href="http://echosa.github.io/blog/categories/mink/atom.xml" rel="self"/>
  <link href="http://echosa.github.io/"/>
  <updated>2015-01-13T08:50:56-06:00</updated>
  <id>http://echosa.github.io/</id>
  <author>
    <name><![CDATA[Brian Zwahr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP and Chmod]]></title>
    <link href="http://echosa.github.io/blog/2012/09/27/php-and-chmod/"/>
    <updated>2012-09-27T09:11:00-05:00</updated>
    <id>http://echosa.github.io/blog/2012/09/27/php-and-chmod</id>
    <content type="html"><![CDATA[<p>So, here&rsquo;s a tip that would have saved me about 10 minutes of frustrated work today. As <a href="http://php.net/manual/en/function.chmod.php">clearly stated in the PHP manual</a>, when you&rsquo;re setting the mode for a file via a number, the number must be expressed as octal. What this means is that the leading zero that is typically implicit when using chmod from the command like (e.g. <code>chmod 777 &lt;file&gt;</code>) is <strong>not</strong> implicit when calling chmod from PHP. You have to supply the leading zero, meaning you call something like <code>chmod(&lt;file&gt;, 0777)</code>.</p>

<!--more-->


<p>Now, you might be wondering why someone would be calling chmod from PHP anyway. I know I would be. Well, I&rsquo;m doing so for testing purposes. I have begun using <a href="http://behat.org">Behat with the Mink extension</a> for behavioral testing. I have an sqlite database that gets used with test data for these tests (the actual application uses MySQL, and yes, keeping those two in sync is a pain, especially when triggers are involved, but I digress).</p>

<p>Anyway, because of the way Behat works in conjunction with my running Apache/PHP/application setup, I didn&rsquo;t see a way of hooking into Behat in such a way where I could tell the database to run everything in throw away transactions in order to keep my database clean and as expected for each test scenario. Therefore, I simply hooked into Behat before each scenario to copy my pristine test database to a backup, then after each scenario copy it back, essentially rolling back any transactions that occurred during that scenario.</p>

<p>This may not be the best way to do it, but its what I figured out and its working for me, for now at least. Luckily, this is a well established application and the database doesn&rsquo;t change, so the mysql <-> sqlite syncing is a null issue for the foreseeable future.</p>
]]></content>
  </entry>
  
</feed>
